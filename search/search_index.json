{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"Snowman: Pydantic Model Generator and Query Builder for     Snowflake <p>Snowman is a Python library that provides a way to extract Snowflake table information in a type-safe.</p> <p>Snowman provides two main features:</p> <ul> <li>Automatically generate Pydantic models from Snowflake information schemas</li> <li>Query builder to generate SQL queries in a type-safe</li> </ul> Generated Pydantic Model Query Builder SELECTINSERTUPDATEDELETETRUNCATE <p>\ud83d\udea7 This is a draft. \ud83d\udea7 </p> <p>It does not support complex queries that include only specific fields or table joins.</p> <p>Example</p> <pre><code>from snowman.query import select\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    user: User | None = (\n        select()\n        .from_(User)\n        .where(\n            lambda c: (c.self.id == 1)\n            .and_(c.self.name == \"John Doe\")\n            .and_(c.self.age &gt;= 18),\n        )\n        .order.by(\n            lambda c: [\n                c.self.id.desc,\n                c.self.name.asc.nulls.last,\n            ],\n        )\n        .limit(1)\n        .offset(0)\n        .execute(cursor)\n        .fetchone()\n    )\n</code></pre> <p>Example</p> <pre><code>from snowman.query import insert\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    insert.into(User).values(\n        User(\n            id=1,\n            name=\"John Doe\",\n        ),\n    ).execute(cursor)\n</code></pre> <p>Example</p> <pre><code>import datetime\n\nfrom snowman.query import update\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    update(\n        User,\n    ).set(\n        {\"name\": \"Jane Doe\"},\n    ).where(\n        lambda c: (c.self.name.in_([\"Jane\", \"Doe\"]))\n        .and_(c.self.age &gt; 18)\n        .and_(c.self.created_at &gt;= datetime.datetime(2001, 1, 1)),\n    ).execute(cursor)\n</code></pre> <p>Example</p> <pre><code>from snowman.query import delete\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    delete.from_(\n        User,\n    ).where(\n        lambda c: c.self.id == 1,\n    ).execute(cursor)\n</code></pre> <p>Example</p> <pre><code>from snowman.query import truncate\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    truncate.table.if_.exists(User).execute(cursor)\n</code></pre>"},{"location":"#source-snowflake","title":"Source: Snowflake","text":"<pre><code>CREATE TABLE DATABASE.SCHEMA.USER (\n    ID INTEGER NOT NULL COMMENT 'User ID',\n    NAME TEXT NOT NULL COMMENT 'User Name',\n    AGE INTEGER DEFAULT NULL COMMENT 'User Age',\n    CREATED_AT TIMESTAMP_TZ NOT NULL DEFAULT CURRENT_TIMESTAMP() COMMENT 'Created At'\n) COMMENT 'User Table';\n</code></pre>"},{"location":"#output-python-code","title":"Output: Python Code","text":"<pre><code>#\n# Code generated by snowman; DO NOT EDIT.\n#\n# For more information about snowman,\n# please refer to https://github.com/yassun7010/snowman-py .\n#\n\nimport datetime\nimport typing\n\nimport pydantic\nimport snowman\n\nif typing.TYPE_CHECKING:\n    from . import _schema as _schema\n\n\n# TABLE: DATABASE.SCHEMA.USER\n@snowman.table(\"DATABASE\", \"SCHEMA\", \"USER\")\nclass User(\n    snowman.Table[\n        \"User\",\n        \"_schema._UserColumnAccessor\",\n        \"_schema._UserOrderItemAccessor\",\n        \"_schema._UserInsertTypedDict\",\n        \"_schema._UserUpdateTypedDict\",\n    ]\n):\n    \"\"\"User Table\"\"\"\n\n    id: typing.Annotated[\n        snowman.datatype.INTEGER, pydantic.Field(title=\"User ID\", alias=\"ID\")\n    ]\n    \"\"\"User ID\"\"\"\n\n    name: typing.Annotated[\n        snowman.datatype.TEXT, pydantic.Field(title=\"User Name\", alias=\"NAME\")\n    ]\n    \"\"\"User Name\"\"\"\n\n    age: typing.Annotated[\n        snowman.datatype.INTEGER | None, pydantic.Field(title=\"User Age\", alias=\"AGE\")\n    ] = None\n    \"\"\"User Age\"\"\"\n\n    created_at: typing.Annotated[\n        snowman.datatype.TIMESTAMP_TZ,\n        pydantic.Field(title=\"Created At\", alias=\"CREATED_AT\"),\n    ] = snowman.pydantic.DefaultFactory(datetime.datetime.now)\n    \"\"\"Created At\"\"\"\n</code></pre>"},{"location":"guide/installation/","title":"Installation","text":"<p>Snowman can be installed using <code>pip</code>.</p> <p>To install Snowman, run the following command:</p> <pre><code>pip install snowman-py\n</code></pre>"},{"location":"guide/cli_tool/","title":"CLI Tool","text":"<p>The <code>snowman</code> command is provided to assist in the integration between Snowflake and Python.</p>"},{"location":"guide/cli_tool/#initialization","title":"Initialization","text":""},{"location":"guide/cli_tool/#snowman-init","title":"<code>$ snowman init</code>","text":"<p>Initialize Snowman configuration. For more information on configuration items, please read Configuration.</p> <p>Tip</p> <p>Initialize the <code>snowman.toml</code> file or set <code>[tool.snowman]</code> in <code>pyproject.toml</code> with the <code>--file</code> option. By default, the <code>pyproject.toml</code> file is created.</p> <p>Example</p> <pre><code>snowman init\n</code></pre>"},{"location":"guide/cli_tool/#python-model-generator","title":"Python Model Generator","text":""},{"location":"guide/cli_tool/#snowman-model-generate","title":"<code>$ snowman model generate</code>","text":"<p>Automatically generate Pydantic models from Snowflake information schemas.</p> <p>Example</p> <pre><code>snowman model generate\n</code></pre> Generated Code"},{"location":"guide/cli_tool/#source-snowflake","title":"Source: Snowflake","text":"<pre><code>CREATE TABLE DATABASE.SCHEMA.USER (\n    ID INTEGER NOT NULL COMMENT 'User ID',\n    NAME TEXT NOT NULL COMMENT 'User Name',\n    AGE INTEGER DEFAULT NULL COMMENT 'User Age',\n    CREATED_AT TIMESTAMP_TZ NOT NULL DEFAULT CURRENT_TIMESTAMP() COMMENT 'Created At'\n) COMMENT 'User Table';\n</code></pre>"},{"location":"guide/cli_tool/#output-python-code","title":"Output: Python Code","text":"<pre><code>#\n# Code generated by snowman; DO NOT EDIT.\n#\n# For more information about snowman,\n# please refer to https://github.com/yassun7010/snowman-py .\n#\n\nimport datetime\nimport typing\n\nimport pydantic\nimport snowman\n\nif typing.TYPE_CHECKING:\n    from . import _schema as _schema\n\n\n# TABLE: DATABASE.SCHEMA.USER\n@snowman.table(\"DATABASE\", \"SCHEMA\", \"USER\")\nclass User(\n    snowman.Table[\n        \"User\",\n        \"_schema._UserColumnAccessor\",\n        \"_schema._UserOrderItemAccessor\",\n        \"_schema._UserInsertTypedDict\",\n        \"_schema._UserUpdateTypedDict\",\n    ]\n):\n    \"\"\"User Table\"\"\"\n\n    id: typing.Annotated[\n        snowman.datatype.INTEGER, pydantic.Field(title=\"User ID\", alias=\"ID\")\n    ]\n    \"\"\"User ID\"\"\"\n\n    name: typing.Annotated[\n        snowman.datatype.TEXT, pydantic.Field(title=\"User Name\", alias=\"NAME\")\n    ]\n    \"\"\"User Name\"\"\"\n\n    age: typing.Annotated[\n        snowman.datatype.INTEGER | None, pydantic.Field(title=\"User Age\", alias=\"AGE\")\n    ] = None\n    \"\"\"User Age\"\"\"\n\n    created_at: typing.Annotated[\n        snowman.datatype.TIMESTAMP_TZ,\n        pydantic.Field(title=\"Created At\", alias=\"CREATED_AT\"),\n    ] = snowman.pydantic.DefaultFactory(datetime.datetime.now)\n    \"\"\"Created At\"\"\"\n</code></pre>"},{"location":"guide/cli_tool/#snowman-model-diff","title":"<code>$ snowman model diff</code>","text":"<p>Check differences between Python models and Snowflake information schemas.</p> <p>Example</p> <pre><code>snowman model diff --check\n</code></pre>"},{"location":"guide/cli_tool/configuration/","title":"Configuration","text":"<p>This section describes how to customize the behavior of the <code>snowman</code> command.</p> <p>The configuration written in <code>snowman.toml</code> or <code>[tool.snowman]</code> of <code>pyproject.toml</code> are loaded. Instructions by command arguments have higher priority than the configuration file, and it is possible to override the configuration specified in the configuration file.</p>"},{"location":"guide/cli_tool/configuration/#connection","title":"<code>connection</code>","text":"<p>Set the connection information to Snowflake. Each setting item can be specified directly from the configuration file, or you can specify the environment variable name in the <code>env</code> property to get the value from the environment variable.</p> <p>Example</p> <pre><code>[connection]\naccount = { env = \"SNOWFLAKE_ACCOUNT\" }\nuser = { env = \"SNOWFLAKE_USER\" }\npassword = { env = \"SNOWFLAKE_PASSWORD\" }\nrole = \"DEVELOPER\"\ndatabase = \"MY_DB\"\nschema = \"PUBLIC\"\nwarehouse = \"XSMALL\"\n</code></pre>"},{"location":"guide/cli_tool/configuration/#model","title":"<code>model</code>","text":""},{"location":"guide/cli_tool/configuration/#output_dir","title":"<code>output_dir</code>","text":"<p>Specify the output directory of the Pydantic models generated from the Snowflake information schema.</p> <p>Example</p> <pre><code>[model]\noutput_dir = \"src/models\"\n</code></pre>"},{"location":"guide/cli_tool/configuration/#table_types","title":"<code>table_types</code>","text":"<p>Specify the table types that are the target of model generation. The default value is <code>[\"BASE TABLE\", \"VIEW\"]</code></p> <p>Example</p> <pre><code># Top Level\n[model]\ntable_types = [\"BASE TABLE\"]\n\n# Database Level\n[model.database.MY_DB]\ntable_types = [\"BASE TABLE\"]\n\n# Schema Level\n[model.database.MY_DB.schema.MY_SCHEMA]\ntable_types = [\"BASE TABLE\"]\n</code></pre>"},{"location":"guide/cli_tool/configuration/#include_databases","title":"<code>include_databases</code>","text":"<p>Specify the database names that are the target of model generation. It cannot be used in conjunction with <code>[model.exclude_databases]</code>.</p> <p>Example</p> <pre><code>[model]\ninclude_databases = [\"MY_DB\"]\n</code></pre>"},{"location":"guide/cli_tool/configuration/#exclude_datebases","title":"<code>exclude_datebases</code>","text":"<p>Specify the database names that are not the target of model generation. It cannot be used in conjunction with <code>[model.include_databases]</code>.</p> <p>Example</p> <pre><code>[model]\nexclude_databases = [\"INFORMATION_SCHEMA\", \"MIGRATION\"]\n</code></pre>"},{"location":"guide/cli_tool/configuration/#include_schemas","title":"<code>include_schemas</code>","text":"<p>Specify the schema names that are the target of model generation. It cannot be used in conjunction with <code>[model.database.*.exclude_schemas]</code>.</p> <p>Example</p> <pre><code>[model.database.MY_DB]\ninclude_schemas = [\"PUBLIC\"]\n</code></pre>"},{"location":"guide/cli_tool/configuration/#exclude_schemas","title":"<code>exclude_schemas</code>","text":"<p>Specify the schema names that are not the target of model generation. It cannot be used in conjunction with <code>[model.database.*.include_schemas]</code>.</p> <p>Example</p> <pre><code>[model.database.MY_DB]\nexclude_schemas = [\"SANDBOX\"]\n</code></pre>"},{"location":"guide/cli_tool/configuration/#pydantic","title":"<code>pydantic</code>","text":"<p>Configure the Pydantic models to be generated.</p>"},{"location":"guide/cli_tool/configuration/#model_name_prefix","title":"<code>model_name_prefix</code>","text":"<p>Specify the prefix of the Pydantic model name.</p> <p>Example</p> <pre><code>[pydantic]\nmodel_name_prefix = \"Model\"\n</code></pre> <p>The following conversion is performed:</p> <p><code>database.schema.user</code> -&gt; <code>database.schema.ModelUser</code></p>"},{"location":"guide/cli_tool/configuration/#model_name_suffix","title":"<code>model_name_suffix</code>","text":"<p>Specify the suffix of the Pydantic model name.</p> <p>Example</p> <pre><code>[pydantic]\nmodel_name_suffix = \"Model\"\n</code></pre> <p>The following conversion is performed:</p> <p><code>database.schema.user</code> -&gt; <code>database.schema.UserModel</code></p>"},{"location":"guide/query_builder/","title":"Query Builder","text":"<p>Snowman provides a query builder that maintains the syntax of SQL. You can generate <code>INSERT</code> / <code>UPDATE</code> / <code>DELETE</code> / <code>TRUNCATE</code> queries, but it does not currently official support complex query syntax like <code>SELECT</code>.</p> <p>Tip</p> <p>The query builder is based on simple rules.</p> <ul> <li>SQL reserved words can be written in a way that can be accessed like properties with a dot <code>.</code> in Python.</li> <li>If a SQL reserved word matches a Python reserved word, an underscore <code>_</code> is added to the end of the sql reserved word.</li> </ul> <p>If you know <code>SQL</code>, you can build Snowman queries with a fluent python coding \ud83d\ude80</p> <p>Note</p> <p>The paramstyle used by Snowman is <code>format</code>. The reason for not supporting <code>pyformat</code> is to avoid key duplication when complex query patterns occur.</p> <p>In other words, it uses <code>%s</code> to embed parameters, not <code>%(name)s</code>.</p>"},{"location":"guide/query_builder/#builder-examples","title":"Builder Examples","text":""},{"location":"guide/query_builder/#select-query","title":"Select Query","text":"<p>\ud83d\udea7 This is a draft. This interface is subject to disruptive changes. \ud83d\udea7</p> <p>With the current Python features, it is not possible to write complex queries that include only specific fields or table joins in a type-safe manner. <code>SELECT</code> is an experimental feature, and may be implemented in the future, but it is believed that Python Type Hint evolution is necessary for that.</p> ExecuteBuild <p>Example</p> <pre><code>from snowman.query import select\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    user: User | None = (\n        select()\n        .from_(User)\n        .where(\n            lambda c: (c.self.id == 1)\n            .and_(c.self.name == \"John Doe\")\n            .and_(c.self.age &gt;= 18),\n        )\n        .order.by(\n            lambda c: [\n                c.self.id.desc,\n                c.self.name.asc.nulls.last,\n            ],\n        )\n        .limit(1)\n        .offset(0)\n        .execute(cursor)\n        .fetchone()\n    )\n</code></pre> <p>Example</p> <pre><code>from snowman.query import select\nfrom snowman.query.minify import minify\nfrom your.database.schema import User\n\nquery, params = (\n    select()\n    .from_(User)\n    .where(\n        lambda c: (c.self.id == 1)\n        .and_(c.self.name == \"John Doe\")\n        .and_(c.self.age &gt;= 18),\n    )\n    .order.by(\n        lambda c: [\n            c.self.id.desc,\n            c.self.name.asc.nulls.last,\n        ],\n    )\n    .limit(1)\n    .offset(0)\n).build()\n\nexpected = minify(\n    \"\"\"\n    SELECT\n        *\n    FROM\n        DATABASE.SCHEMA.USER\n    WHERE\n        ID = %s\n        AND NAME = %s\n        AND AGE &gt;= %s\n    ORDER BY\n        ID DESC,\n        NAME ASC NULLS LAST\n    LIMIT %s\n    OFFSET %s\n    \"\"\",\n)\n\nassert query == expected\nassert params == (1, \"John Doe\", 18, 1, 0)\n</code></pre>"},{"location":"guide/query_builder/#insert-query","title":"Insert Query","text":"ExecuteBuildExecute Many <p>Example</p> <pre><code>from snowman.query import insert\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    insert.into(User).values(\n        User(\n            id=1,\n            name=\"John Doe\",\n        ),\n    ).execute(cursor)\n</code></pre> <p>Example</p> <pre><code>import datetime\n\nfrom snowman.query import insert\nfrom snowman.query.minify import minify\nfrom your.database.schema import User\n\nnow = datetime.datetime.now()\n\nquery, params = (\n    insert.into(\n        User,\n    ).values(\n        User(\n            id=1,\n            name=\"John Doe\",\n            created_at=now,\n        ),\n    )\n).build()\n\nexpected = minify(\n    \"\"\"\n    INSERT INTO\n        DATABASE.SCHEMA.USER\n    (\n        ID,\n        NAME,\n        AGE,\n        CREATED_AT\n    )\n    VALUES (\n        %s,\n        %s,\n        %s,\n        %s\n    )\n    \"\"\",\n)\n\nassert query == expected\nassert params == (1, \"John Doe\", None, now)\n</code></pre> <p>Example</p> <pre><code>from snowman.query import insert\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    insert.into(User).values(\n        [\n            User(id=1, name=\"John Doe\"),\n            User(id=2, name=\"Alice Smith\"),\n        ],\n    ).execute(cursor)\n</code></pre>"},{"location":"guide/query_builder/#update-query","title":"Update Query","text":"ExecuteBuild <p>Example</p> <pre><code>import datetime\n\nfrom snowman.query import update\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    update(\n        User,\n    ).set(\n        {\"name\": \"Jane Doe\"},\n    ).where(\n        lambda c: (c.self.name.in_([\"Jane\", \"Doe\"]))\n        .and_(c.self.age &gt; 18)\n        .and_(c.self.created_at &gt;= datetime.datetime(2001, 1, 1)),\n    ).execute(cursor)\n</code></pre> <p>Example</p> <pre><code>import datetime\n\nfrom snowman.query import update\nfrom snowman.query.minify import minify\nfrom your.database.schema import User\n\nquery, params = (\n    update(\n        User,\n    )\n    .set(\n        {\"name\": \"Jane Doe\"},\n    )\n    .where(\n        lambda c: (c.self.name.in_([\"Jane\", \"Doe\"]))\n        .and_(c.self.age &gt; 18)\n        .and_(c.self.created_at &gt;= datetime.datetime(2001, 1, 1)),\n    )\n).build()\n\nexpected = minify(\n    \"\"\"\n    UPDATE\n        DATABASE.SCHEMA.USER\n    SET\n        NAME = %s\n    WHERE\n        NAME IN (%s)\n        AND AGE &gt; %s\n        AND CREATED_AT &gt;= %s\n    \"\"\",\n)\n\nassert query == expected\nassert params == (\"Jane Doe\", [\"Jane\", \"Doe\"], 18, datetime.datetime(2001, 1, 1))\n</code></pre>"},{"location":"guide/query_builder/#delete-query","title":"Delete Query","text":"ExecuteBuild <p>Example</p> <pre><code>from snowman.query import delete\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    delete.from_(\n        User,\n    ).where(\n        lambda c: c.self.id == 1,\n    ).execute(cursor)\n</code></pre> <p>Example</p> <pre><code>from snowman.query import delete\nfrom snowman.query.minify import minify\nfrom your.database.schema import User\n\nquery, params = (\n    delete.from_(\n        User,\n    ).where(\n        lambda c: c.self.id == 1,\n    )\n).build()\n\nexpected = minify(\n    \"\"\"\n    DELETE FROM\n        DATABASE.SCHEMA.USER\n    WHERE\n        ID = %s\n    \"\"\",\n)\n\nassert query == expected\nassert params == (1,)\n</code></pre>"},{"location":"guide/query_builder/#truncate-query","title":"Truncate Query","text":"ExecuteBuild <p>Example</p> <pre><code>from snowman.query import truncate\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    truncate.table.if_.exists(User).execute(cursor)\n</code></pre> <p>Example</p> <pre><code>from snowman.query import truncate\nfrom your.database.schema import User\n\nquery, params = truncate.table.if_.exists(User).build()\n\nexpected = \"TRUNCATE TABLE IF EXISTS DATABASE.SCHEMA.USER\"\n\nassert query == expected\nassert params == ()\n</code></pre>"},{"location":"guide/query_builder/#where-clause","title":"Where Clause","text":"<p>There are several ways to generate the <code>WHERE</code> clause. For simple conditions, you can complete everything in Python, and benefit from static analysis.</p> FunctionConditionString <p>The method of generating the <code>WHERE</code> clause using <code>function</code> like <code>lambda</code> is the easiest way to write type safe queries without importing other modules. The argument name of the lambda function is recommended to use <code>c</code> (the first letter of <code>Context</code>).</p> <p>Example</p> <pre><code>import datetime\n\nfrom snowman.query import update\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    update(\n        User,\n    ).set(\n        {\"name\": \"Jane Doe\"},\n    ).where(\n        lambda c: (c.self.name.in_([\"Jane\", \"Doe\"]))\n        .and_(\n            c.group(\n                (c.self.age.is_.not_.null)\n                .and_(c.self.age &gt;= 18)\n                .and_(c.self.age &lt;= 100),\n            ),\n        )\n        .and_(c.self.created_at &gt;= datetime.datetime(2001, 1, 1)),\n    ).execute(cursor)\n</code></pre> <p>Tip</p> <p><code>c.self</code> is an abbreviation for <code>c(User)</code>.</p> <p>This is useful when writing repeatedly, and can be easily written with dot chain.</p> <p>If you explicitly state that it is a column of <code>User</code>, it will be as follows.</p> <pre><code>import datetime\n\nfrom snowman.query import update\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    update(\n        User,\n    ).set(\n        {\"name\": \"Jane Doe\"},\n    ).where(\n        lambda c: (c(User).name.in_([\"Jane\", \"Doe\"]))\n        .and_(\n            c.group(\n                (c(User).age.is_.not_.null)\n                .and_(c(User).age &gt;= 18)\n                .and_(c(User).age &lt;= 100),\n            ),\n        )\n        .and_(c(User).created_at &gt;= datetime.datetime(2001, 1, 1)),\n    ).execute(cursor)\n</code></pre> <p>The method using lambda expressions is easy to write expressions, but if you write complex conditions, errors may be difficult to read. By using <code>Condition</code>, you can write conditions more strictly and make it easier to track errors.</p> <p>Example</p> <pre><code>import datetime\n\nfrom snowman.query import update\nfrom snowman.query.expression import column as c\nfrom snowman.query.expression import group\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    update(\n        User,\n    ).set(\n        {\"name\": \"Jane Doe\"},\n    ).where(\n        (c(User).name.in_([\"Jane\", \"Doe\"]))\n        .and_(\n            group(\n                (c(User).age.is_.not_.null)\n                .and_(c(User).age &gt;= 18)\n                .and_(c(User).age &lt;= 100),\n            ),\n        )\n        .and_(c(User).created_at &gt;= datetime.datetime(2001, 1, 1)),\n    ).execute(cursor)\n</code></pre> <p>If you want to write a more complex condition, you can use string and params. This method is useful when you want to write a condition that is difficult to write with <code>Condition</code>.</p> <p>Example</p> <pre><code>import datetime\n\nfrom snowman.query import update\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    update(\n        User,\n    ).set(\n        {\"name\": \"Jane Doe\"},\n    ).where(\n        \"\"\"\n        NAME IN (%s)\n        AND (\n            AGE IS NOT NULL\n            AND AGE &gt;= %s\n            AND AGE &lt;= %s\n        )\n        AND CREATED_AT &gt;= %s\n        \"\"\",\n        ([\"Jane\", \"Doe\"], 18, 100, datetime.datetime(2001, 1, 1)),\n    ).execute(cursor)\n</code></pre>"},{"location":"guide/query_builder/data_type/","title":"Data Type","text":""},{"location":"guide/query_builder/data_type/#data-types","title":"Data Types","text":"<p>Snowman provides Python types corresponding to the data types supported by Snowflake, which are defined in the <code>snowman.datatype</code> module.</p> <p>Note</p> <p>Snowman automatically retrieves these data types from the Snowflake database, so you don't need to specify these types directly.</p> Snowman Data Type Python Type <code>snowman.datatype.NUMBER</code> <code>float</code> <code>snowman.datatype.DECIMAL</code> <code>decimal.Decimal</code> <code>snowman.datatype.NUMERIC</code> <code>float</code> <code>snowman.datatype.INT</code> <code>int</code> <code>snowman.datatype.INTEGER</code> <code>int</code> <code>snowman.datatype.BIGINT</code> <code>int</code> <code>snowman.datatype.SMALLINT</code> <code>int</code> <code>snowman.datatype.TINYINT</code> <code>int</code> <code>snowman.datatype.BYTEINT</code> <code>int</code> <code>snowman.datatype.FLOAT</code> <code>float</code> <code>snowman.datatype.FLOAT4</code> <code>float</code> <code>snowman.datatype.FLOAT8</code> <code>float</code> <code>snowman.datatype.DOUBLE</code> <code>float</code> <code>snowman.datatype.REAL</code> <code>float</code> <code>snowman.datatype.VARCHAR</code> <code>str</code> <code>snowman.datatype.CHAR</code> <code>str</code> <code>snowman.datatype.CHARACTER</code> <code>str</code> <code>snowman.datatype.STRING</code> <code>str</code> <code>snowman.datatype.TEXT</code> <code>str</code> <code>snowman.datatype.BINARY</code> <code>bytes</code> <code>snowman.datatype.VARBINARY</code> <code>bytes</code> <code>snowman.datatype.BOOLEAN</code> <code>bool</code> <code>snowman.datatype.DATE</code> <code>datetime.date</code> <code>snowman.datatype.DATETIME</code> <code>datetime.datetime</code> <code>snowman.datatype.TIME</code> <code>datetime.time</code> <code>snowman.datatype.TIMESTAMP</code> <code>datetime.datetime</code> <code>snowman.datatype.TIMESTAMP_LTZ</code> <code>datetime.datetime</code> <code>snowman.datatype.TIMESTAMP_NTZ</code> <code>datetime.datetime</code> <code>snowman.datatype.TIMESTAMP_TZ</code> <code>datetime.datetime</code> <code>snowman.datatype.VARIANT</code> <code>Any</code> <code>snowman.datatype.OBJECT</code> <code>dict[str, Any]</code> <code>snowman.datatype.ARRAY</code> <code>list[Any]</code> <code>snowman.datatype.GEOGRAPHY</code> <code>Any</code> <code>snowman.datatype.GEOMETRY</code> <code>Any</code>"}]}